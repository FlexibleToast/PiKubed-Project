---
# tasks file for roles/install-k3sup-ha
- name: Install k3s SELinux support
  yum:
    name: '{{ item }}'
    state: present
  loop:
  - container-selinux
  - selinux-policy-base
  - https://rpm.rancher.io/k3s-selinux-0.1.1-rc1.el7.noarch.rpm
  when: ansible_distribution_file_variety == "RedHat"

- name: Verify cgroup flags are enabled
  lineinfile:
    path: /boot/cmdline.txt
    backrefs: yes
    state: present
    regexp: '^(.*) {{item}}(.*)$'
    backup: yes
    line: '\g<1> {{item}}\g<2>'
  with_items:
    - 'cgroup_enable=cpuset'
    - 'cgroup_enable=memory'
    - 'cgroup_memory=1'
  register: cgroup_flags

- name: Reboot to apply cgroups
  reboot:
  when: cgroup_flags.changed

- name: Check if k3sup already installed
  stat:
    path: /usr/local/bin/k3sup
  register: k3sup_bin

- name: Download k3sup install script
  get_url:
    url: https://get.k3sup.dev
    dest: /tmp/getk3sup.sh
    mode: '0755'
  when: not k3sup_bin.stat.exists

- name: Install k3sup
  command: /tmp/getk3sup.sh
  when: not k3sup_bin.stat.exists

- name: Install initial master
  command:
  args:
    argv:
    - k3sup
    - install
    - --ip
    - "{{ hostvars[groups['init_master'][0]].ansible_default_ipv4.address }}"
    - --user
    - '{{ root.username }}'
    - --ssh-key
    - "{{ root.remote_keypath }}/{{ root.keyfile }}"
    #- --k3s-version
    #- '{{ k3s.version }}'
    - --cluster
    creates: /var/lib/rancher/k3s/server/node-token
  when: ansible_host in groups['init_master']

- name: Pause for 5 minutes
  pause:
    minutes: 5

- name: Install masters
  command:
  args:
    argv:
    - k3sup
    - join
    - --ip
    - "{{ hostvars[item].ansible_default_ipv4.address }}"
    - --user
    - '{{ root.username }}'
    - --server-user
    - '{{ root.username }}'
    - --server-ip
    - "{{ hostvars[groups['init_master'][0]].ansible_default_ipv4.address }}"
    - --ssh-key
    - "{{ root.remote_keypath }}/{{ root.keyfile }}"
    #- --k3s-version
    #- '{{ k3s.version }}'
    - --server
  when: ansible_host in groups['init_master']
  loop: "{{ groups['masters'] }}"
  ignore_errors: yes

- name: Ensure k3s is running on masters
  service:
    name: k3s
    state: started
    enabled: yes
  when: ansible_host not in groups['workers']

- name: Install workers
  command:
  args:
    argv:
    - k3sup
    - join
    - --ip
    - "{{ hostvars[item].ansible_default_ipv4.address }}"
    - --server-ip
    - "{{ hostvars[groups['init_master'][0]].ansible_default_ipv4.address }}"
    - --user
    - '{{ root.username }}'
    - --ssh-key
    - "{{ root.remote_keypath }}/{{ root.keyfile }}"
    #- --k3s-version
    #- '{{ k3s.version }}'
  when: ansible_host in groups['init_master']
  loop: "{{ groups['workers'] }}"

- name: create k3s.yaml.orig
  copy:
    remote_src: yes
    src: /etc/rancher/k3s/k3s.yaml
    dest: /etc/rancher/k3s/k3s.yaml.orig
    force: no
  when: ansible_host in groups['init_master']

- name: modify k3s.yaml with VIP
  replace:
    path: /etc/rancher/k3s/k3s.yaml
    regexp: "server: https://127.0.0.1:6443"
    replace: "server: https://{{ vip.ip }}:6443"
  when: ansible_host in groups['init_master']

- name: get kube config
  fetch:
    src: /etc/rancher/k3s/k3s.yaml
    dest: k3s.yaml
    mode: 0600
    flat: yes
  when: ansible_host in groups['init_master']
